## Preliminary setup

# Loads the package 'parallel' for parallelized computing used to speed up the simulation considerably
library(parallel)

# Loads the calibration curve
calcurve=read.csv(file.choose(),header=T)

# parameterizes the simulation
max.n.per.run=2000
n.runs=2000
o.t=7500
c.t=0
o.N_t=500
c.N_t=10000
offset.error=50
unif.model.pdf=dunif(o.t:c.t,max=o.t,min=c.t)
trunc.expon.model.pdf=d.trunc.expon(o.t:c.t,o.t,c.t,o.N_t,c.N_t)
model.dens=trunc.expon.model.pdf
resolution=20


## Stochasticity

# Stochasticity I: Introduces random sampling error into the experiment by drawing samples of a set size from theoretical sample distributions
test.unif=q.unif(max.n.per.run,n.runs,o.t,c.t)
test.trunc.expon=q.trunc.expon(max.n.per.run,n.runs,o.t,c.t,o.N_t,c.N_t)

# Stochasticity II, propagating error: Maps true calendar ages into true radiocarbon ages by dispersing them through the calibration curve (works like first 1/2 of OxCal's R_Simulation function)
unif.true.rc=true.rc.iter(test.unif,calcurve)
trunc.expon.true.rc=true.rc.iter(test.trunc.expon,calcurve)

# Stochasticity III, propagating error even more: offsets the true radiocarbon ages to emulate instrument measurement error (works like second 1/2 of OxCal's R_Simulation function)
unif.offset.rc=i.m.offset.iter(unif.true.rc,offset.error)
trunc.expon.offset.rc=i.m.offset.iter(trunc.expon.true.rc,offset.error)

# Saves work for interrupting and returning to work, sharing, etc.
write.csv(x=test.unif,file="uniform_true_calage.csv",row.names=FALSE,col.names=FALSE)
write.csv(x=unif.true.rc,file="uniform_true_rc.csv",row.names=FALSE,col.names=FALSE)
write.csv(x=unif.offset.rc,file="uniform_offset_rc.csv",row.names=FALSE,col.names=FALSE)
write.csv(x=test.trunc.expon,file="trunc_expon_true_calage.csv",row.names=FALSE,col.names=FALSE)
write.csv(x=trunc.expon.true.rc,file="trunc_expon_true_rc.csv",row.names=FALSE,col.names=FALSE)
write.csv(x=trunc.expon.offset.rc,file="trunc_expon_offset_rc.csv",row.names=FALSE,col.names=FALSE)

# Loads previous work, to resume work, save time, etc.
test.unif=read.csv(file="uniform_true_calage.csv",header=T)
unif.true.rc=read.csv(file="uniform_true_rc.csv",header=T)
unif.offset.rc=read.csv(file="uniform_offset_rc.csv",header=T)
test.trunc.expon=read.csv(file="trunc_expon_true_calage.csv",header=T)
trunc.expon.true.rc=read.csv(file="trunc_expon_true_rc.csv",header=T)
trunc.expon.offset.rc=read.csv(file="trunc_expon_offset_rc.csv",header=T)


## spd generation and plug-in estimation

# generates intra-run spds and inter-run summaries thereof, for a uniform distribution
cl=makeCluster(4)
	Us2000n30r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=30,offset.rc.dates.mat=unif.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	Us2000n30r20PIE=interrun.PIE(Us2000n30r20)
	write.csv(x=Us2000n30r20[[1]],file="Us2000n30r20.csv",row.names=Us2000n30r20[[2]])
	write.csv(x=Us2000n30r20PIE,file="Us2000n30r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	Us2000n50r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=50,offset.rc.dates.mat=unif.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	Us2000n50r20PIE=interrun.PIE(Us2000n50r20)
	write.csv(x=Us2000n50r20[[1]],file="Us2000n50r20.csv",row.names=Us2000n50r20[[2]])
	write.csv(x=Us2000n50r20PIE,file="Us2000n50r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	Us2000n100r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=100,offset.rc.dates.mat=unif.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	Us2000n100r20PIE=interrun.PIE(Us2000n100r20)
	write.csv(x=Us2000n100r20[[1]],file="Us2000n100r20.csv",row.names=Us2000n100r20[[2]])
	write.csv(x=Us2000n100r20PIE,file="Us2000n100r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	Us2000n200r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=200,offset.rc.dates.mat=unif.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	Us2000n200r20PIE=interrun.PIE(Us2000n200r20)
	write.csv(x=Us2000n200r20[[1]],file="Us2000n200r20.csv",row.names=Us2000n200r20[[2]])
	write.csv(x=Us2000n200r20PIE,file="Us2000n200r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	Us2000n500r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=500,offset.rc.dates.mat=unif.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	Us2000n500r20PIE=interrun.PIE(Us2000n500r20)
	write.csv(x=Us2000n500r20[[1]],file="Us2000n500r20.csv",row.names=Us2000n500r20[[2]])
	write.csv(x=Us2000n500r20PIE,file="Us2000n500r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	Us2000n1000r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=1000,offset.rc.dates.mat=unif.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	Us2000n1000r20PIE=interrun.PIE(Us2000n1000r20)
	write.csv(x=Us2000n1000r20[[1]],file="Us2000n1000r20.csv",row.names=Us2000n1000r20[[2]])
	write.csv(x=Us2000n1000r20PIE,file="Us2000n1000r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	Us2000n1500r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=1500,offset.rc.dates.mat=unif.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	Us2000n1500r20PIE=interrun.PIE(Us2000n1500r20)
	write.csv(x=Us2000n1500r20[[1]],file="Us2000n1500r20.csv",row.names=Us2000n1500r20[[2]])
	write.csv(x=Us2000n1500r20PIE,file="Us2000n1500r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	Us2000n2000r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=2000,offset.rc.dates.mat=unif.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	Us2000n2000r20PIE=interrun.PIE(Us2000n2000r20)
	write.csv(x=Us2000n2000r20[[1]],file="Us2000n2000r20.csv",row.names=Us2000n2000r20[[2]])
	write.csv(x=Us2000n2000r20PIE,file="Us2000n2000r20PIE.csv",row.names=FALSE)
	stopCluster(cl)

# generates intra-run spds and inter-run summaries thereof, for a truncated exponential distribution
cl=makeCluster(4)
	TEs2000n30r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=30,offset.rc.dates.mat=trunc.expon.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	TEs2000n30r20PIE=interrun.PIE(TEs2000n30r20)
	write.csv(x=TEs2000n30r20[[1]],file="TEs2000n30r20.csv",row.names=TEs2000n30r20[[2]])
	write.csv(x=TEs2000n30r20PIE,file="TEs2000n30r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	TEs2000n50r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=50,offset.rc.dates.mat=trunc.expon.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	TEs2000n50r20PIE=interrun.PIE(TEs2000n50r20)
	write.csv(x=TEs2000n50r20[[1]],file="TEs2000n50r20.csv",row.names=TEs2000n50r20[[2]])
	write.csv(x=TEs2000n50r20PIE,file="TEs2000n50r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	TEs2000n100r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=100,offset.rc.dates.mat=trunc.expon.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	TEs2000n100r20PIE=interrun.PIE(TEs2000n100r20)
	write.csv(x=TEs2000n100r20[[1]],file="TEs2000n100r20.csv",row.names=TEs2000n100r20[[2]])
	write.csv(x=TEs2000n100r20PIE,file="TEs2000n100r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	TEs2000n200r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=200,offset.rc.dates.mat=trunc.expon.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	TEs2000n200r20PIE=interrun.PIE(TEs2000n200r20)
	write.csv(x=TEs2000n200r20[[1]],file="TEs2000n200r20.csv",row.names=TEs2000n200r20[[2]])
	write.csv(x=TEs2000n200r20PIE,file="TEs2000n200r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	TEs2000n500r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=500,offset.rc.dates.mat=trunc.expon.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	TEs2000n500r20PIE=interrun.PIE(TEs2000n500r20)
	write.csv(x=TEs2000n500r20[[1]],file="TEs2000n500r20.csv",row.names=TEs2000n500r20[[2]])
	write.csv(x=TEs2000n500r20PIE,file="TEs2000n500r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	TEs2000n1000r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=1000,offset.rc.dates.mat=trunc.expon.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	TEs2000n1000r20PIE=interrun.PIE(TEs2000n1000r20)
	write.csv(x=TEs2000n1000r20[[1]],file="TEs2000n1000r20.csv",row.names=TEs2000n1000r20[[2]])
	write.csv(x=TEs2000n1000r20PIE,file="TEs2000n1000r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	TEs2000n1500r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=1500,offset.rc.dates.mat=trunc.expon.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	TEs2000n1500r20PIE=interrun.PIE(TEs2000n1500r20)
	write.csv(x=TEs2000n1500r20[[1]],file="TEs2000n1500r20.csv",row.names=TEs2000n1500r20[[2]])
	write.csv(x=TEs2000n1500r20PIE,file="TEs2000n1500r20PIE.csv",row.names=FALSE)
	stopCluster(cl)
cl=makeCluster(4)
	TEs2000n2000r20=spd.simulation(cl=cl,n.runs=n.runs,n.per.run=2000,offset.rc.dates.mat=trunc.expon.offset.rc,offset.error=offset.error,calcurve=calcurve,resolution=20)
	TEs2000n2000r20PIE=interrun.PIE(TEs2000n2000r20)
	write.csv(x=TEs2000n2000r20[[1]],file="TEs2000n2000r20.csv",row.names=TEs2000n2000r20[[2]])
	write.csv(x=TEs2000n2000r20PIE,file="TEs2000n2000r20PIE.csv",row.names=FALSE)
	stopCluster(cl)





##########################################
## Illustrations of runs for comparison ##
##########################################

############################
## Figure 7 (uniform TFD) ##
############################
# Set-up
	par(oma=c(4,4,2,4))
	figure.frame=layout(matrix(c(1,2,3,4,5,6,7,8,9,10),5,2))
		layout.show(figure.frame)
	calBPdim=c(10000,0)
	prob.dim=c(0,0.008)
# Calibration curve slope
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=c(-6,6),axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	cc.slope.plot(avg.cc.slope(1,calcurve),lwd=1,col="light gray")
	cc.slope.plot(avg.cc.slope(10,calcurve),lwd=2,col="dark gray")
	abline(h=c(0,1))
	axis(3,seq(10000,0,-1000))
	axis(2,c(-6,-3,0,1,6,3))
	mtext("average calibration\ncurve slope",2,3,cex=0.75)
# n = 30
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(Us2000n30r20PIE)
	ninetyfive.limits(Us2000n30r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*unif.model.pdf,0),col="black",lwd=2)
	mean.line(Us2000n30r20PIE)
	text(9500,0.0025,font=2,"n=30")
# n = 50
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(Us2000n50r20PIE)
	ninetyfive.limits(Us2000n50r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*unif.model.pdf,0),col="black",lwd=2)
	mean.line(Us2000n50r20PIE)
	axis(2,c(0,0.004,0.008))
	mtext("probability mass\n(5-year bins)",2,3,cex=0.75)
	text(9500,0.0025,font=2,"n=50")
# n = 100
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(Us2000n100r20PIE)
	ninetyfive.limits(Us2000n100r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*unif.model.pdf,0),col="black",lwd=2)
	mean.line(Us2000n100r20PIE)
	text(9500,0.0025,font=2,"n=100")
# n = 200
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(Us2000n200r20PIE)
	ninetyfive.limits(Us2000n200r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*unif.model.pdf,0),col="black",lwd=2)
	mean.line(Us2000n200r20PIE)
	axis(1,seq(10000,0,-1000))
	axis(2,c(0,0.004,0.008))
	mtext("probability mass\n(5-year bins)",2,3,cex=0.75)
	text(9500,0.0025,font=2,"n=200")
# Calibration curve slope
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=c(-6,6),axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	cc.slope.plot(avg.cc.slope(1,calcurve),lwd=1,col="light gray")
	cc.slope.plot(avg.cc.slope(10,calcurve),lwd=2,col="dark gray")
	abline(h=c(0,1))
	axis(3,seq(10000,0,-1000))
# n = 500
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(Us2000n500r20PIE)
	mean.line(Us2000n500r20PIE)
	ninetyfive.limits(Us2000n500r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*unif.model.pdf,0),col="black",lwd=2)
	mean.line(Us2000n500r20PIE)
	axis(4,c(0,0.004,0.008))
	mtext("probability mass\n(5-year bins)",4,4,cex=0.75)
	text(9500,0.0025,font=2,"n=500")
# n = 1000
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(Us2000n1000r20PIE)
	ninetyfive.limits(Us2000n1000r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*unif.model.pdf,0),col="black",lwd=2)
	mean.line(Us2000n1000r20PIE)
	text(9500,0.0025,font=2,"n=1000")
# n = 1500
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(Us2000n1500r20PIE)
	ninetyfive.limits(Us2000n1500r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*unif.model.pdf,0),col="black",lwd=2)
	mean.line(Us2000n1500r20PIE)
	axis(4,c(0,0.004,0.008))
	mtext("probability mass\n(5-year bins)",4,4,cex=0.75)
	text(9500,0.0025,font=2,"n=1500")
# n = 2000
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(Us2000n2000r20PIE)
	ninetyfive.limits(Us2000n2000r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*unif.model.pdf,0),col="black",lwd=2)
	mean.line(Us2000n2000r20PIE)
	axis(1,seq(10000,0,-1000))
	text(9500,0.0025,font=2,"n=2000")
title(xlab="cal BP",outer=T,font=2)
############################
############################





##########################################
## Figure 8 (truncated exponential TFD) ##
##########################################
# Set-up
	par(oma=c(4,4,2,4))
	figure.frame=layout(matrix(c(1,2,3,4,5,6,7,8,9,10),5,2))
		layout.show(figure.frame)
	calBPdim=c(10000,0)
	prob.dim=c(0,0.008)
# Calibration curve slope
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=c(-6,6),axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	cc.slope.plot(avg.cc.slope(1,calcurve),lwd=1,col="light gray")
	cc.slope.plot(avg.cc.slope(10,calcurve),lwd=2,col="dark gray")
	abline(h=c(0,1))
	axis(3,seq(10000,0,-1000))
	axis(2,c(-6,-3,0,1,6,3))
	mtext("average calibration\ncurve slope",2,3,cex=0.75)
# n = 30
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(TEs2000n30r20PIE)
	ninetyfive.limits(TEs2000n30r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="black",lwd=2)
	mean.line(TEs2000n30r20PIE)
	text(9500,0.0025,font=2,"n=30")
# n = 50
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(TEs2000n50r20PIE)
	mean.line(TEs2000n50r20PIE)
	ninetyfive.limits(TEs2000n50r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="black",lwd=2)
	mean.line(TEs2000n50r20PIE)
	axis(2,c(0,0.004,0.008))
	mtext("probability mass\n(5-year bins)",2,3,cex=0.75)
	text(9500,0.0025,font=2,"n=50")
# n = 100
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(TEs2000n100r20PIE)
	ninetyfive.limits(TEs2000n100r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="black",lwd=2)
	mean.line(TEs2000n100r20PIE)
	text(9500,0.0025,font=2,"n=100")
# n = 200
	par(mar=c(0,1,0,0))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(TEs2000n200r20PIE)
	ninetyfive.limits(TEs2000n200r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="black",lwd=2)
	mean.line(TEs2000n200r20PIE)
	axis(1,seq(10000,0,-1000))
	axis(2,c(0,0.004,0.008))
	mtext("probability mass\n(5-year bins)",2,3,cex=0.75)
	text(9500,0.0025,font=2,"n=200")
# Calibration curve slope
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=c(-6,6),axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	cc.slope.plot(avg.cc.slope(1,calcurve),lwd=1,col="light gray")
	cc.slope.plot(avg.cc.slope(10,calcurve),lwd=2,col="dark gray")
	abline(h=c(0,1))
	axis(3,seq(10000,0,-1000))
# n = 500
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(TEs2000n500r20PIE)
	ninetyfive.limits(TEs2000n500r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="black",lwd=2)
	mean.line(TEs2000n500r20PIE)
	axis(4,c(0,0.004,0.008))
	mtext("probability mass\n(5-year bins)",4,4,cex=0.75)
	text(9500,0.0025,font=2,"n=500")
# n = 1000
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(TEs2000n1000r20PIE)
	ninetyfive.limits(TEs2000n1000r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="black",lwd=2)
	mean.line(TEs2000n1000r20PIE)
	text(9500,0.0025,font=2,"n=1000")
# n = 1500
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(TEs2000n1500r20PIE)
	ninetyfive.limits(TEs2000n1500r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="black",lwd=2)
	mean.line(TEs2000n1500r20PIE)
	axis(4,c(0,0.004,0.008))
	mtext("probability mass\n(5-year bins)",4,4,cex=0.75)
	text(9500,0.0025,font=2,"n=1500")
# n = 2000
	par(mar=c(0,0,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	box(lwd=2)
	abline(h=0)
	IQR.polygon(TEs2000n2000r20PIE)
	ninetyfive.limits(TEs2000n2000r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="black",lwd=2)
	mean.line(TEs2000n2000r20PIE)
	axis(1,seq(10000,0,-1000))
	text(9500,0.0025,font=2,"n=2000")
title(xlab="cal BP",outer=T,font=2)
##########################################
##########################################





###############
## Figure 10 ##
###############
# Set-up
	par(oma=c(4,4,4,4))
	figure.frame=layout(matrix(c(1,2,3),3,2))
		layout.show(figure.frame)
	calBPdim=c(10000,0)
	prob.dim=c(0,0.005)
# Calibration curve slope
	par(mar=c(0,1,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=c(-6,6),axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	polygon(c(850,750,750,850),c(-100,-100,100,100),col="#a6cee3",border="#a6cee3")
	box(lwd=2)
	cc.slope.plot(avg.cc.slope(1,calcurve),lwd=1,col="light gray")
	cc.slope.plot(avg.cc.slope(10,calcurve),lwd=2,col="dark gray")
	abline(h=c(0,1))
	text(10000,3.6,"A",font=2,cex=1.5)
	axis(3,seq(10000,0,-1000))
	axis(2,c(-6,-3,0,1,6,3))
	mtext("average calibration\ncurve slope",2,3,cex=0.8)
# random spd 1
	par(mar=c(0,1,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	polygon(c(850,750,750,850),c(-100,-100,100,100),col="#a6cee3",border="#a6cee3")
	box(lwd=2)
	abline(h=0)
	polygon(c(TEs2000n200r20PIE[,1],rev(TEs2000n200r20PIE[,1])),c(rep(0,length(TEs2000n200r20[[1]][,sample(1:2000,1)])),rev(TEs2000n200r20[[1]][,sample(1:2000,1)])),col="dark gray",border="black")
	ninetyfive.limits(TEs2000n200r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="#1f78b4",lwd=2)
	text(9000,0.003,font=2,"n=200")
	text(10000,0.004,"B",font=2,cex=1.5)
	axis(4,c(0,0.005,0.0025))
	mtext("probability mass\n(5-year bins)",4,4,cex=0.8)
# random spd 2
	par(mar=c(0,1,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=prob.dim,axes=F,xlab="",ylab="")
	abline(v=seq(0,10000,500),col="light gray",lty=2)
	polygon(c(850,750,750,850),c(-100,-100,100,100),col="#a6cee3",border="#a6cee3")
	box(lwd=2)
	abline(h=0)
	polygon(c(TEs2000n200r20PIE[,1],rev(TEs2000n200r20PIE[,1])),c(rep(0,length(TEs2000n200r20[[1]][,sample(1:2000,1)])),rev(TEs2000n200r20[[1]][,sample(1:2000,1)])),col="dark gray",border="black")
	ninetyfive.limits(TEs2000n200r20PIE)
	lines(c(o.t,o.t:c.t,c.t),c(0,5*trunc.expon.model.pdf,0),col="#1f78b4",lwd=2)
	text(9000,0.003,font=2,"n=200")
	text(10000,0.004,"C",font=2,cex=1.5)
	axis(2,c(0,0.005,0.0025))
	axis(1,seq(10000,0,-1000))
	mtext("probability mass\n(5-year bins)",2,3,cex=0.8)
	mtext("cal BP",1,3,cex=0.8)
###############
###############





###############
## Figure 11 ##
###############
upper.index=which(Us2000n2000r20PIE[,1]==7400)
lower.index=which(Us2000n2000r20PIE[,1]==0)
lower.percentile=0.25
upper.percentile=0.75
clipped=cbind(Us2000n2000r20PIE[upper.index:lower.index,1],Us2000n2000r20PIE[upper.index:lower.index,5]-Us2000n2000r20PIE[upper.index:lower.index,3])
clipped=cbind(clipped,rank(clipped[,2])/length(clipped[,2]))
best=clipped[which(clipped[,3]<=lower.percentile),]
worst=clipped[which(clipped[,3]>=upper.percentile),]

# Set-up
	par(oma=c(4,4,4,4))
	figure.frame=layout(matrix(c(1,2),2,2))
		layout.show(figure.frame)
	calBPdim=c(7500,0)
	IQRdim=c(0.00006,0.00022)
# Calibration curve slope
	par(mar=c(0,1,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=c(-1,3),axes=F,xlab="",ylab="")
	abline(v=best[,1],col="#b2df8a")
	abline(v=worst[,1],col="#a6cee3")
	abline(v=seq(0,10000,500),col="black",lty=3)
	box(lwd=2)
	cc.slope.plot(avg.cc.slope(10,calcurve),lwd=1,col="black")
	text(7250,2.5,font=2,cex=1.5,"A")
	abline(h=c(0,1),lty=2)
	axis(3,seq(10000,0,-1000))
	axis(2,seq(-1,3,1))
	mtext("average calibration\ncurve slope",2,3,cex=0.8)
# Inter-run IQR boundary
	par(mar=c(0,1,0,1))
	plot(NULL,type="n",xlim=calBPdim,ylim=IQRdim,axes=F,xlab="",ylab="")
	abline(v=best[,1],col="#b2df8a")
	abline(v=worst[,1],col="#a6cee3")
	abline(v=seq(10000,0,-500),lty=3)
	box(lwd=2)
	lines(clipped[,1],clipped[,2],lwd=1)
	text(7250,0.0002,font=2,cex=1.5,"B")
	abline(h=median(clipped[,2]))
	abline(h=quantile(clipped[,2],lower.percentile),lty=2)
	abline(h=quantile(clipped[,2],upper.percentile),lty=2)
	axis(1,seq(10000,0,-1000))
	axis(4,seq(0.00006,0.00022,0.00004))
	mtext("IQR",4,3,cex=0.8)
title(xlab="cal BP",outer=T)
